components:
  schemas:
    Action:
      properties:
        constraint:
          $ref: '#/components/schemas/Constraint'
        includedIn:
          type: string
        type:
          type: string
      type: object
    Asset:
      properties:
        properties:
          additionalProperties:
            type: object
          type: object
      type: object
    AssetDto:
      properties:
        properties:
          additionalProperties:
            type: object
          type: object
      required:
        - properties
      type: object
    AssetEntryDto:
      properties:
        asset:
          $ref: '#/components/schemas/AssetDto'
        dataAddress:
          $ref: '#/components/schemas/DataAddressDto'
      required:
        - asset
        - dataAddress
      type: object
    Catalog:
      properties:
        contractOffers:
          items:
            $ref: '#/components/schemas/ContractOffer'
          type: array
        id:
          type: string
      type: object
    Constraint:
      discriminator:
        propertyName: edctype
      properties:
        edctype:
          type: string
      required:
        - edctype
      type: object
    ContractAgreementDto:
      properties:
        assetId:
          type: string
        consumerAgentId:
          type: string
        contractEndDate:
          format: int64
          type: integer
        contractSigningDate:
          format: int64
          type: integer
        contractStartDate:
          format: int64
          type: integer
        id:
          type: string
        policyId:
          type: string
        providerAgentId:
          type: string
      type: object
    ContractDefinitionDto:
      properties:
        accessPolicyId:
          type: string
        contractPolicyId:
          type: string
        criteria:
          items:
            $ref: '#/components/schemas/Criterion'
          type: array
        id:
          type: string
      required:
        - accessPolicyId
        - contractPolicyId
        - criteria
        - id
      type: object
    ContractNegotiationDto:
      properties:
        contractAgreementId:
          type: string
        counterPartyAddress:
          type: string
        errorDetail:
          type: string
        id:
          type: string
        protocol:
          type: string
        state:
          type: string
        type:
          enum:
            - CONSUMER
            - PROVIDER
          type: string
      type: object
    ContractOffer:
      properties:
        asset:
          $ref: '#/components/schemas/Asset'
        assetId:
          type: string
        consumer:
          format: uri
          type: string
        contractEnd:
          format: date-time
          type: string
        contractStart:
          format: date-time
          type: string
        id:
          type: string
        offerEnd:
          format: date-time
          type: string
        offerStart:
          format: date-time
          type: string
        policy:
          $ref: '#/components/schemas/Policy'
        policyId:
          type: string
        provider:
          format: uri
          type: string
      type: object
    ContractOfferDescription:
      properties:
        assetId:
          type: string
        offerId:
          type: string
        policy:
          $ref: '#/components/schemas/Policy'
        policyId:
          type: string
      required:
        - assetId
        - offerId
      type: object
    ContractOfferRequest:
      properties:
        connectorAddress:
          type: string
        connectorId:
          type: string
        contractOffer:
          $ref: '#/components/schemas/ContractOffer'
        correlationId:
          type: string
        protocol:
          type: string
        type:
          enum:
            - INITIAL
            - COUNTER_OFFER
          type: string
      type: object
    Criterion:
      properties:
        left:
          type: object
        op:
          type: string
        right:
          type: object
      type: object
    DataAddress:
      properties:
        properties:
          additionalProperties:
            type: string
          type: object
      type: object
    DataAddressDto:
      properties:
        properties:
          additionalProperties:
            type: string
          type: object
      type: object
    DataAddressInformationDto:
      properties:
        properties:
          additionalProperties:
            type: string
          type: object
      type: object
    DataPlaneInstance:
      properties:
        id:
          type: string
        lastActive:
          format: int64
          type: integer
        properties:
          additionalProperties:
            type: object
          type: object
        turnCount:
          format: int32
          type: integer
        url:
          format: url
          type: string
      type: object
    DataRequest:
      properties:
        assetId:
          type: string
        connectorAddress:
          type: string
        connectorId:
          type: string
        contractId:
          type: string
        dataDestination:
          $ref: '#/components/schemas/DataAddress'
        destinationType:
          type: string
        id:
          type: string
        managedResources:
          type: boolean
        processId:
          type: string
        properties:
          additionalProperties:
            type: string
          type: object
        protocol:
          type: string
        transferType:
          $ref: '#/components/schemas/TransferType'
      type: object
    DataRequestDto:
      properties:
        assetId:
          type: string
        connectorId:
          type: string
        contractId:
          type: string
      type: object
    DeprovisionedResource:
      properties:
        error:
          type: boolean
        errorMessage:
          type: string
        inProcess:
          type: boolean
        provisionedResourceId:
          type: string
      type: object
    Duty:
      properties:
        action:
          $ref: '#/components/schemas/Action'
        assignee:
          type: string
        assigner:
          type: string
        consequence:
          $ref: '#/components/schemas/Duty'
        constraints:
          items:
            $ref: '#/components/schemas/Constraint'
          type: array
        parentPermission:
          $ref: '#/components/schemas/Permission'
        target:
          type: string
        uid:
          type: string
      type: object
    FederatedCatalogCacheQuery:
      properties:
        criteria:
          items:
            $ref: '#/components/schemas/Criterion'
          type: array
      type: object
    NegotiationId:
      properties:
        id:
          type: string
      type: object
    NegotiationInitiateRequestDto:
      properties:
        connectorAddress:
          type: string
        connectorId:
          type: string
        offer:
          $ref: '#/components/schemas/ContractOfferDescription'
        protocol:
          type: string
      required:
        - connectorAddress
        - connectorId
        - offer
        - protocol
      type: object
    NegotiationState:
      properties:
        state:
          type: string
      type: object
    Permission:
      properties:
        action:
          $ref: '#/components/schemas/Action'
        assignee:
          type: string
        assigner:
          type: string
        constraints:
          items:
            $ref: '#/components/schemas/Constraint'
          type: array
        duties:
          items:
            $ref: '#/components/schemas/Duty'
          type: array
        target:
          type: string
        uid:
          type: string
      type: object
    Policy:
      properties:
        '@type':
          enum:
            - SET
            - OFFER
            - CONTRACT
          type: string
        assignee:
          type: string
        assigner:
          type: string
        extensibleProperties:
          additionalProperties:
            type: object
          type: object
        inheritsFrom:
          type: string
        obligations:
          items:
            $ref: '#/components/schemas/Duty'
          type: array
        permissions:
          items:
            $ref: '#/components/schemas/Permission'
          type: array
        prohibitions:
          items:
            $ref: '#/components/schemas/Prohibition'
          type: array
        target:
          type: string
        uid:
          type: string
      type: object
    Prohibition:
      properties:
        action:
          $ref: '#/components/schemas/Action'
        assignee:
          type: string
        assigner:
          type: string
        constraints:
          items:
            $ref: '#/components/schemas/Constraint'
          type: array
        target:
          type: string
        uid:
          type: string
      type: object
    ProvisionerWebhookRequest:
      properties:
        apiToken:
          type: string
        assetId:
          type: string
        contentDataAddress:
          $ref: '#/components/schemas/DataAddress'
        hasToken:
          type: boolean
        resourceDefinitionId:
          type: string
        resourceName:
          type: string
      required:
        - assetId
        - contentDataAddress
        - resourceDefinitionId
        - resourceName
      type: object
    SelectionRequest:
      properties:
        destination:
          $ref: '#/components/schemas/DataAddress'
        source:
          $ref: '#/components/schemas/DataAddress'
        strategy:
          type: string
      type: object
    TransferId:
      properties:
        id:
          type: string
      type: object
    TransferProcessDto:
      properties:
        dataDestination:
          $ref: '#/components/schemas/DataAddressInformationDto'
        dataRequest:
          $ref: '#/components/schemas/DataRequestDto'
        errorDetail:
          type: string
        id:
          type: string
        state:
          type: string
        type:
          type: string
      type: object
    TransferRequestDto:
      properties:
        assetId:
          type: string
        connectorAddress:
          type: string
        connectorId:
          type: string
        contractId:
          type: string
        dataDestination:
          $ref: '#/components/schemas/DataAddress'
        id:
          type: string
        managedResources:
          type: boolean
        properties:
          additionalProperties:
            type: string
          type: object
        protocol:
          type: string
        transferType:
          $ref: '#/components/schemas/TransferType'
      required:
        - assetId
        - connectorAddress
        - connectorId
        - contractId
        - dataDestination
        - id
        - protocol
        - transferType
      type: object
    TransferState:
      properties:
        state:
          type: string
      type: object
    TransferType:
      properties:
        contentType:
          type: string
        isFinite:
          type: boolean
      type: object
info:
  description: All files merged by open api merger
  license:
    name: Apache License v2.0
    url: http://apache.org/v2
  title: EDC REST API
  version: 1.0.0-SNAPSHOT
openapi: 3.0.1
paths:
  /assets:
    get:
      operationId: getAllAssets
      parameters:
        - explode: true
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
          style: form
        - explode: true
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
          style: form
        - explode: true
          in: query
          name: filter
          required: false
          schema:
            type: string
          style: form
        - explode: true
          in: query
          name: sort
          required: false
          schema:
            enum:
              - ASC
              - DESC
            type: string
          style: form
        - explode: true
          in: query
          name: sortField
          required: false
          schema:
            type: string
          style: form
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AssetDto'
                type: array
          description: default response
      tags:
        - Asset
    post:
      operationId: createAsset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetEntryDto'
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
        - Asset
  /assets/{id}:
    delete:
      operationId: removeAsset
      parameters:
        - explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
        - Asset
    get:
      operationId: getAsset
      parameters:
        - explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetDto'
          description: default response
      tags:
        - Asset
  /callback/{processId}/deprovision:
    post:
      operationId: callDeprovisionWebhook
      parameters:
        - explode: false
          in: path
          name: processId
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeprovisionedResource'
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
        - HTTP Provisioner Webhook
  /callback/{processId}/provision:
    post:
      operationId: callProvisionWebhook
      parameters:
        - explode: false
          in: path
          name: processId
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvisionerWebhookRequest'
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
        - HTTP Provisioner Webhook
  /catalog:
    get:
      operationId: getCatalog
      parameters:
        - explode: true
          in: query
          name: providerUrl
          required: false
          schema:
            type: string
          style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
          description: Gets contract offers (=catalog) of a single connector
      tags:
        - Catalog
  /check/health:
    get:
      operationId: checkHealth
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
        - Application Observability
  /check/liveness:
    get:
      operationId: getLiveness
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
        - Application Observability
  /check/readiness:
    get:
      operationId: getReadiness
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
        - Application Observability
  /check/startup:
    get:
      operationId: getStartup
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
        - Application Observability
  /contractagreements:
    get:
      operationId: getAllAgreements
      parameters:
        - explode: true
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
          style: form
        - explode: true
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
          style: form
        - explode: true
          in: query
          name: filter
          required: false
          schema:
            type: string
          style: form
        - explode: true
          in: query
          name: sort
          required: false
          schema:
            enum:
              - ASC
              - DESC
            type: string
          style: form
        - explode: true
          in: query
          name: sortField
          required: false
          schema:
            type: string
          style: form
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ContractAgreementDto'
                type: array
          description: default response
      tags:
        - Contract Agreement
  /contractagreements/{id}:
    get:
      operationId: getContractAgreement
      parameters:
        - explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractAgreementDto'
          description: default response
      tags:
        - Contract Agreement
  /contractdefinitions:
    get:
      operationId: getAllContractDefinitions
      parameters:
        - explode: true
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
          style: form
        - explode: true
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
          style: form
        - explode: true
          in: query
          name: filter
          required: false
          schema:
            type: string
          style: form
        - explode: true
          in: query
          name: sort
          required: false
          schema:
            enum:
              - ASC
              - DESC
            type: string
          style: form
        - explode: true
          in: query
          name: sortField
          required: false
          schema:
            type: string
          style: form
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ContractDefinitionDto'
                type: array
          description: default response
      tags:
        - Contract Definition
    post:
      operationId: createContractDefinition
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ContractDefinitionDto'
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
        - Contract Definition
  /contractdefinitions/{id}:
    delete:
      operationId: deleteContractDefinition
      parameters:
        - explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
        - Contract Definition
    get:
      operationId: getContractDefinition
      parameters:
        - explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractDefinitionDto'
          description: default response
      tags:
        - Contract Definition
  /contractnegotiations:
    get:
      operationId: getNegotiations
      parameters:
        - explode: true
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
          style: form
        - explode: true
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
          style: form
        - explode: true
          in: query
          name: filter
          required: false
          schema:
            type: string
          style: form
        - explode: true
          in: query
          name: sort
          required: false
          schema:
            enum:
              - ASC
              - DESC
            type: string
          style: form
        - explode: true
          in: query
          name: sortField
          required: false
          schema:
            type: string
          style: form
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ContractNegotiationDto'
                type: array
          description: default response
      tags:
        - Contract Negotiation
    post:
      operationId: initiateContractNegotiation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NegotiationInitiateRequestDto'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NegotiationId'
          description: default response
      tags:
        - Contract Negotiation
  /contractnegotiations/{id}:
    get:
      operationId: getNegotiation
      parameters:
        - explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractNegotiationDto'
          description: default response
      tags:
        - Contract Negotiation
  /contractnegotiations/{id}/agreement:
    get:
      operationId: getAgreementForNegotiation
      parameters:
        - explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractAgreementDto'
          description: default response
      tags:
        - Contract Negotiation
  /contractnegotiations/{id}/cancel:
    post:
      operationId: cancelNegotiation
      parameters:
        - explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
        - Contract Negotiation
  /contractnegotiations/{id}/decline:
    post:
      operationId: declineNegotiation
      parameters:
        - explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
        - Contract Negotiation
  /contractnegotiations/{id}/state:
    get:
      operationId: getNegotiationState
      parameters:
        - explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NegotiationState'
          description: default response
      tags:
        - Contract Negotiation
  /control/agreement/{id}:
    get:
      deprecated: true
      operationId: getAgreementById
      parameters:
        - explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /control/catalog:
    get:
      deprecated: true
      operationId: getDescription
      parameters:
        - explode: true
          in: query
          name: provider
          required: false
          schema:
            type: string
          style: form
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /control/negotiation:
    post:
      deprecated: true
      operationId: initiateNegotiation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractOfferRequest'
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /control/negotiation/{id}:
    get:
      deprecated: true
      operationId: getNegotiationById
      parameters:
        - explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /control/negotiation/{id}/state:
    get:
      deprecated: true
      operationId: getNegotiationStateById
      parameters:
        - explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /control/transfer:
    post:
      deprecated: true
      operationId: addTransfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataRequest'
      responses:
        default:
          content:
            application/json: {}
          description: default response
  /federatedcatalog:
    post:
      operationId: getCachedCatalog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FederatedCatalogCacheQuery'
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ContractOffer'
                type: array
          description: default response
  /identity-hub/collections:
    post:
      operationId: write
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: default response
      tags:
        - Identity Hub
  /identity-hub/collections-commit:
    post:
      operationId: writeCommit
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
        - Identity Hub
  /identity-hub/query-commits:
    post:
      operationId: queryCommits
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: default response
      tags:
        - Identity Hub
  /identity-hub/query-objects:
    post:
      operationId: queryObjects
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: default response
      tags:
        - Identity Hub
  /instances:
    get:
      operationId: getAll
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DataPlaneInstance'
                type: array
          description: default response
      tags:
        - Dataplane Selector
    post:
      operationId: addEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataPlaneInstance'
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
        - Dataplane Selector
  /instances/select:
    post:
      operationId: find
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelectionRequest'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataPlaneInstance'
          description: default response
      tags:
        - Dataplane Selector
  /policies:
    get:
      operationId: getAllPolicies
      parameters:
        - explode: true
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
          style: form
        - explode: true
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
          style: form
        - explode: true
          in: query
          name: filter
          required: false
          schema:
            type: string
          style: form
        - explode: true
          in: query
          name: sort
          required: false
          schema:
            enum:
              - ASC
              - DESC
            type: string
          style: form
        - explode: true
          in: query
          name: sortField
          required: false
          schema:
            type: string
          style: form
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Policy'
                type: array
          description: default response
      tags:
        - Policy
    post:
      operationId: createPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
        - Policy
  /policies/{id}:
    delete:
      operationId: deletePolicy
      parameters:
        - explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
        - Policy
    get:
      operationId: getPolicy
      parameters:
        - explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
          description: default response
      tags:
        - Policy
  /transferprocess:
    get:
      operationId: getAllTransferProcesses
      parameters:
        - explode: true
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
          style: form
        - explode: true
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
          style: form
        - explode: true
          in: query
          name: filter
          required: false
          schema:
            type: string
          style: form
        - explode: true
          in: query
          name: sort
          required: false
          schema:
            enum:
              - ASC
              - DESC
            type: string
          style: form
        - explode: true
          in: query
          name: sortField
          required: false
          schema:
            type: string
          style: form
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TransferProcessDto'
                type: array
          description: default response
      tags:
        - Transfer Process
    post:
      operationId: initiateTransfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequestDto'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferId'
          description: default response
      tags:
        - Transfer Process
  /transferprocess/{id}:
    get:
      operationId: getTransferProcess
      parameters:
        - explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferProcessDto'
          description: default response
      tags:
        - Transfer Process
  /transferprocess/{id}/cancel:
    post:
      operationId: cancelTransferProcess
      parameters:
        - explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
        - Transfer Process
  /transferprocess/{id}/deprovision:
    post:
      operationId: deprovisionTransferProcess
      parameters:
        - explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
        - Transfer Process
  /transferprocess/{id}/state:
    get:
      operationId: getTransferProcessState
      parameters:
        - explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferState'
          description: default response
      tags:
        - Transfer Process
servers:
  - url: /
